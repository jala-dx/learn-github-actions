# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push
  push:
    tags: 
    - "v*.*.*"
  workflow_call:
    inputs: 
      version_tag:
        description: 'Version tag for kurl release'
        required: true
        type: string
  workflow_dispatch:
    inputs: 
      version_tag:
        description: 'Version tag for kurl release'
        required: true

  # Allows you to run this workflow manually from the Actions tab
  #workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: hadolint/hadolint-action@v1.5.0
        with:
          dockerfile: Dockerfile

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
          export VERSION_TAG=$(echo $GITHUB_REF | awk -F'/' '{ print $NF }')
          echo dumping $GITHUB_REF
          echo $GITHUB_REF
          echo dumping $VERSION_TAG
          echo $VERSION_TAG
          echo dumping input version ${{ inputs.version_tag }} 
          echo dumping eventst version ${{ github.event.version_tag }} 
          export CURRENT_TAG=${{ github.event.inputs.version_tag || inputs.version_tag }}
          echo current_tag $CURRENT_TAG
          git fetch --tags
          tag=$(git tag | grep '^v20' | grep -v 'v2022\.09\.04' | sort | tail -1)
          echo $tag
          tag_arr=${tag//-/ }
          echo i am here
          echo printing arr1 $tag_arr[1]
          echo printing arr0 ${tag_arr[0]}
          echo printing arr0- $tag_arr[0]
          echo printing arr0-- ${tag_arr[0]}[0]
          todays_date=$(date +'v%Y.%m.%d')
          echo printing $todays_date
          if [ "$todays_date" = "$tag_arr[0]" ]; then 
            echo "Strings are equal."
          fi 
          echo i am done


